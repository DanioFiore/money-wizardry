apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-gce-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ingress-gce-controller
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "nodes", "pods", "secrets", "configmaps", "events"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "ingressclasses"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses/status"]
  verbs: ["update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-gce-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-gce-controller
subjects:
- kind: ServiceAccount
  name: ingress-gce-controller
  namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-gce-controller
  namespace: kube-system
  labels:
    app: ingress-gce-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-gce-controller
  template:
    metadata:
      labels:
        app: ingress-gce-controller
    spec:
      serviceAccountName: ingress-gce-controller
      containers:
      - name: controller
        image: registry.k8s.io/ingress-gce/controller:v1.25.0
        args:
        - --v=2
        - --logtostderr
        - --configmap=kube-system/ingress-gce-controller-config
        - --default-backend-service=kube-system/l7-default-backend
        ports:
        - containerPort: 8080
          name: http
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5